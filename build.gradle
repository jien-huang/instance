plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
    id 'jacoco'
	id 'application'
	id "com.github.ben-manes.versions" version '0.28.0'
}

group = 'com.automationtest'
version = '1.0'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

ext {
	set('springBootAdminVersion', "2.2.3")
}

version='0.1.4'

def user = "$System.env.USERNAME"
def pass = "$System.env.PASSWORD"
def imageTarget = "huangjien/instance"
def imageTag = project.findProperty('imageTag') ?: 'latest'

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'de.codecentric:spring-boot-admin-starter-server'
	compile group: 'com.google.code.gson', name: 'gson'
	compile group: 'com.google.guava', name: 'guava', version: '29.0-jre'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.7.0.202003110725-r'
	compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml'
}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
	}
}

def webappDir = "$projectDir/src/main/frontend"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

mainClassName  = 'com.automationtest.instance.InstanceApplication'

processResources {
	dependsOn "buildAngular"
}

task buildAngular(type:Exec) {
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "buildAngular.bat"
	} else {
		commandLine "./buildAngular.sh"
	}
}

task tagRelease(type: Exec) {
    commandLine '/bin/sh', '-c', "git tag ${version}"
}

task dockerLogin(type: Exec){
  commandLine '/bin/sh', '-c', 'docker login -u ' + user + ' -p ' + pass
}

// Enable gradle to use property like -Dspring.profiles.active=dev
bootRun {
	systemProperties = System.properties
}

task copyJar(type: Exec){
	commandLine '/bin/sh', '-c', "cp build/libs/${project.name}-${project.version}.jar build/libs/${project.name}.jar"
}

task createDockerImage(type: Exec){
	dependsOn 'copyJar'
	commandLine '/bin/sh', '-c', "docker build -t ${imageTarget}:${project.version} ."
}

task tagDockerImage(type:Exec){
	dependsOn 'createDockerImage'
	commandLine '/bin/sh', '-c', "docker tag ${imageTarget}:${project.version} ${imageTarget}:${imageTag}"
}

task runLocally(type: Exec) {
	dependsOn 'createDockerImage'
	commandLine "docker run -p 8090:8090 ${imageTarget}:${project.version}"
}

task pushDockerImage(type: Exec){
	dependsOn 'tagDockerImage'
	commandLine '/bin/sh', '-c', "docker login -u ${user} -p ${pass} && docker push ${imageTarget}"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled true
    }
}

test {
    if (System.env['TRAVIS'] == 'true' || System.env['USER'] == 'gitpod') {
        exclude "**/ScriptsFolderMonitorTest.class"
    }
	
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
}
